<%@ import sc.lang.html.Element; %>
<html>
<head title="StrataCode"/>
<body>

<div id="content" extends="PageLayout">

   <div id="mainPanel">
      <div id="tagRow">
         <div class="tagBox">
            <div class="tagline">Beautifully manage code complexity</div>
            <div class="taglineTwo">A new dimension in coding with layers and code-processing.</div>
            <div class="intro">
              Universal customization, deep integrations, manageable, declarative applications with rich features, flexible deployment. A new way for framework developers to build highly leveragable systems.
            </div>
         </div>

         <div class="tagGraphic">
            <center>
               <a class="videoLink" href="videos.html"><img src="./images/ide-small.png" id="tagImg"><br>Watch the intro videos</a>
            </center>
         </div>
      </div>

      <div id="InfoBox" abstract="true" 
           class=':= "infoBox " + (detailBox.visible ? "infoBoxSelected" : "")'
           clickEvent="=: updateVisible()">
         <%! 
            Element detailBox; 

            void updateVisible() {
               detailBox.visible = !detailBox.visible;
            }
         %>
      </div>

      <div id="BaseDetailBox" abstract="true" class="detailBox" visible="false">
         <div id="openArrowContainer" style="position: relative; width: 0px; height: 0px">
            <div class="openArrow" style='= " left: " + 128 + "px"'/>
         </div>
         <img id="detailCloseIcon" class="closeIconSize" src="./images/closeX.png" style="float: right" clickEvent="=: BaseDetailBox.this.visible = false">
      </div>

      <div id="codeProcBox" extends="InfoBox" detailBox="= codeProcDetail" >
         <div class="infoBoxBody">
            <div class="infoBoxTitle">Code processor</div>
            Parse code, make incremental, type-aware changes before compiling (e.g. converting field to getX/setX property)
         </div>
         <img src="/images/code-proc.png" class="infoBoxImage">
      </div>

      <div id="codeProcDetail" extends="BaseDetailBox">
         <div id="boxTitle" class="infoBoxTitle">Code processor</div>
         <ul>
            <li>Breath new life into old Java with code processing - and run it in the browser after converting to Javascript.
            <li>Keeps Java's strengths: libraries, code completion, find usages, edit time errors, refactoring, runtime speed, standard syntax, etc.
            <li>Supports all of Java's syntax and can be used to customize and refactor existing Java applications.   
            <li>Layer your build files, use static typing and Java syntax. Reduce copying, allow simple project dir organization. Re-arrange project files smoothly, change git repos without complex "flag day" changes.
            <li>Manage multi-process, multi-runtime systems with custom deployment configuration using a single command and list of layers. 
            <li>Use dynamic layers for runtime configuration, or compiled for "best of both worlds" development and deployment flexibility.
            <li>Manage configuration for operations and deployment all in one tool.
            <li>Java command line and test scripts - static typing, find-usages, refactor etc. Run java expressions one command at a time. Change your current type. Script mode or edit mode for making tweaks to any file at the command line, or generate a new file. Target any process. Test framework validates client and server HTML, server and client logs for more awareness and "actionable" diffs when tests fail.
            <li>Build your own Java code processing tools from intuitive, powerful APIs.
         </ul>
      </div>

      <div id="featBox" extends="InfoBox" detailBox="= featDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">StrataCode language</div>
            Java organized in layers, with features for declarative components, mixing dynamic and compiled layers for immediate code updates and efficient runtime.
         </span>
         <img src="/images/lang-feat.png" class="infoBoxImage">
      </div>

      <div id="featDetail" extends="BaseDetailBox">
         <span class="infoBoxTitle">StrataCode language</span> 
         Just the right additions to Java syntax for more concise, readable code and configuration. 
         <ul>
            <li>Real properties in Java: automatic, customizable getX/setX conversion.
            <li>Data binding operators for Java expressions: forward :=, reverse =:, and bi-directional :=:.  Easy, fast, customizable.
            <li>New 'object' operator and @Component annotation: manage object graphs and configuration with Java types, Java syntax.
            <li>Layer level imports, public, and other annotations.  Robustness of Java but more manageable with less code.
            <li>Automated build, run framework with concise and flexible framework development hooks for synchronizing compile time and runtime assets.
            <li>Multiple inheritance: interfaces with instance properties and property assignments 
         </ul>
      </div>

      <div id="sysBox" extends="InfoBox" detailBox="= sysDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Multi-process systems</div> 
            One command to build, and run client/server apps, or multi-process systems.
            Data sync of overlapping layers for declarative, efficient, intuitive RPC.
            real time, system-wide testing.
         </span>
         <img src="/images/multi-proc.png" class="infoBoxImage">
      </div>

      <div id="sysDetail" extends="BaseDetailBox">
         <span class="infoBoxTitle">Multi-process systems</span> - one stack of layers are organized into one or more processes. Manage the entire build, run, refresh with a single command. Overlapping layers provide the foundation for generated RPC to manage back and forth exchange of data. Remote method calls are detected and handled automatically.
      </div>

      <div id="webBox" extends="InfoBox" detailBox="= webDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Web programming</div> 
            Component oriented web programming.
            Java converted to readable JS. Real time.
            Declarative component lifecycle.
         </span>
         <img src="/images/web-framework.png" class="infoBoxImage">
      </div>

      <div id="webDetail" extends="BaseDetailBox">
         <div class="infoBoxTitle">Web programming</div> 
         Flexible way to build any web application.
         <ul>
            <li>Layered html templates bring the power of Java to web apps</li>
            <li>Java to Javascript: readable JS code, usable JS APIs, debuggable without a simulator</li>
            <li>Layered, isomorphic HTML/Java templates - run code on client, server or both with one syntax</li>
            <li>Supports many standard Java classes: ArrayList, HashMap, LinkedHashMap, etc.</li>
            <li>Libraries, modules, automatic dependency detection and ordering</li>
            <li>Code patching for refreshable, stateful apps and better management customization UIs</li>
            <li>Data sync for declarative client/server app development</li>
         </ul>
      </div>

      <div id="custBox" extends="InfoBox" detailBox="= custDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Customization built in</div> 
            IntelliJ plugin, dynamic and compiled layers, 
            management UIs built from annotated domain models,
            layers for feature-oriented development, plugins, and separation of dependencies for improved code reuse.
         </span>
         <img src="/images/cust-built-in.png" class="infoBoxImage">
      </div>

      <div extends="BaseDetailBox" id="custDetail">
         <div class="infoBoxTitle">Customization built in</div>
         <ul>
           <li>Run apps using dynamic layers for on-the-fly updates. Compile layers for runtime speed.
           <li>Build declarative management UIs on top of plain domain models that support not only management of instances, but customization of types as well.
           <li>Create new layers, and cut and paste preserving apis.
           <li>Break out 'feature layers' to eliminate "one size fits all" development.
           <li>Photoshop-like layered organization of code, files, and data for manageability.
           <li>Layers are modules that can also modify features, a built-in plugin capability you can expose for certain types.
           <li>Layers also separate code for better workflows, testing, customization, A/B testing.  A complement to version control when it makes sense to keep changes separate.</li>
           <li><a href="articles/aboutLayers.html">More on layers</a>.
         </ul>
      </div>
   </div>

   <div class="defaultDetailBox">
   <p>
Just over ten years ago, <a href="about.html">Jeff Vroom</a> (jeff@jvroom.com) began this project, an ambitious attempt to build a framework based on layers and code-processing that he prefers over other available tools. After finally achieving that goal, a preview release of StrataCode is now available. For those who like developing frameworks, it's a relatively small, readable, maintainable code base with no core dependencies. 
</p>
<p>
   StrataCode is in a preview release, while we are looking for feedback on the right license. We'd like to make a sustainable developer's tool that has some way to compensate the developers who build great tools. We are looking for projects to build with StrataCode, investors, and partners.
  </p>
  <p>
Although still not production quality <a href="status.html">(see status)</a>, we believe it is a great tool and set of frameworks for building apps from scratch. At first it will require a fairly high level of support from us. It would also be useful to refactor large existing Java code bases, supporting continual evolution during the refactoring process. It can also be used to build or upgrade an existing SaaS platform, or build your own language oriented tools in Java. 
  </p>
  <p>
  Read more in these <a href="articles/">articles</a>.
  </p>
   </div>
</div>

</body>

</html>
