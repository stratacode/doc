<%@ import sc.lang.html.Element; %>
<html>
<head title="StrataCode"/>
<body>

<div id="content" extends="DocPageLayout">

   <div id="mainPanel">
      <div abstract="true" class="infoBox" id="InfoBox"/>
      <div abstract="true" class="graphicBox" id="GraphicBox"/>

      <div class="tagBox" extends="InfoBox">
         <div class="tagline">Scalable. Customizable.</div>
         <div class="taglineTwo">A new dimension in coding with layers and code-processing</div>
         <div class="intro">
         StrataCode provides Java extensions for data binding, components, layers, and client/server sync. An IntelliJ plugin. Java to JS converter. Site builder framework with storefront and management UIs.
         </div>
         <div id="actionButtons" class="actionButtons">
            <a href="/download/" class="actionButton">
               Download preview
            </a>
            <a href="/examples/siteBuilder.html" class="actionButton">
               <span>Site builder</span> 
            </a> 
            <a href="/videos.html" class="actionButton">
               Videos
            </a>
         </div>
      </div>


      <div id="bindBox" extends="InfoBox">
         <span class="infoBoxLinkBody">
         <a href="/doc/dataBinding.html">
            <div class="infoBoxTitle">Data binding for Java expressions</div>
           Attach expressions to properties with three new operators for configurable rules that run anywhere. Bind to remote data sources in the browser. Call methods when properties change for seamless async method calls. Use for validation, database queries, UIs, management UIs, and more. Debuggable and scalable for programmers. Easy to customize by everyone else. <span style="text-decoration: underline">Learn more</span>.
           <div class="infoBoxSubImage">
              <img src="/images/bindingTypes.png" class="mobileImage75">
           </div>
         </a>
         </span>
      </div>
      <div id="bindBoxGraphic" extends="GraphicBox">
         <span class="infoBoxGraphicBody">
            <div class="infoBoxHeader">Forward binding</div>
            <img src="/images/forwardBindExamp.png" class="infoBoxImage"><br/>
            <div class="infoBoxHeader">Reverse + bi-directional</div>
            <img src="/images/reverseBindExamp.png" class="infoBoxImage"><br/>
         </span>
      </div>

      <hr class="boxSeparator"/>

      <div id="componentBox" extends="InfoBox">
         <span class="infoBoxLinkBody"><a href="/doc/components.html">
            <div class="infoBoxTitle">Next gen components</div>
               Wire together components using properties. Use @Component for graphs with recursive relationships and multi-step initialization. The same source code works in both compiled and dynamic modes, all statically typed. 
               Automatic getX/setX, events, parent/child, and flexible declarative lifecycle to provide a thread-safe sandbox for components. Reduce framework dependencies in application code by injecting them using annotations and code-templates. Framework dependencies are isolated to framework layers and generated code allowing application code to be freely reused.<span style="text-decoration: underline">Learn more</span>.
         </a></span>
      </div>

      <div id="componentGraphic" extends="GraphicBox">
         <img src="/images/objectGraph.png" class="infoBoxImage"><br/>
      </div>


      <hr class="boxSeparator"/>

      <div id="layerBox" extends="InfoBox">
         <span class="infoBoxLinkBody"><a href="/articles/aboutLayers.html">
            <div class="infoBoxTitle">Layered code</div>
            Run programs with a list of layers. Each layer may extend one or more others forming an ordered stack. 
            <p/>
            Files in each layer are placed into a name space using settings in that layer (e.g. a package prefix may be added, html files placed in the web directory). Files in a subsequent layer with the same name will replace, or modify the previous one. Formats like sc, sct, and schtml support a type-safe 'modify type' operation by merging the source files using the code-processor. This operation changes the original type: adding fields, overriding methods, setting properties.
            <p/>
            The combined result is saved in a typical project directory that's compiled and run. <span style="text-decoration: underline">Learn more</span>.
           <br/>
         </a></span>
      </div>

      <div id="layerGraphic" extends="GraphicBox">
            <img src="/images/layersCodeConfig.png" class="infoBoxImage">
      </div>

      <hr class="boxSeparator"/>

      <div id="sysBox" extends="InfoBox">
         <span class="infoBoxLinkBody"><a href="/articles/syncWithLayers.html">
            <div class="infoBoxTitle">Multi-process systems</div> 
            One layered config to better manage overlaps between tools. 
            One command to build, and run client/server apps, or multi-process systems.
            Data sync of overlaps for efficient, intuitive RPC.
         </a></span>
      </div>

      <div id="sysProcGraphic" extends="GraphicBox">
         <img src="/images/multi-proc.png" class="infoBoxImage">
      </div>

      <hr class="boxSeparator"/>


      <div id="webBox" extends="InfoBox">
         <span class="infoBoxLinkBody"><a href="/doc/webDoc/">
            <div class="infoBoxTitle">Web programming</div> 
            Templates support reactive, web components with data binding, inheritance and tag objects that expose browser features as properties.
            Build concise, customizable, efficient pages whether as a static site, client-only, server-only, or in isomorphic client/server mode.
            <p/>
            Templates are converted to Java that's transpiled to readable JS for the browser. Synchronize overlapping layers of the application to reduce the cost and complexity of client/server programming.
            <span style="text-decoration: underline">Learn more</span>.
         </a></span>
      </div>

      <div id="webGraphic" extends="GraphicBox">
         <img src="/images/web-framework.png" class="infoBoxImage">
      </div>

      <hr class="boxSeparator"/>

      <div id="dbBox" extends="InfoBox">
         <div class="infoBoxLinkBody"><a href="/articles/persistWithLayers.html">
            <div class="infoBoxTitle">Database framework</div>
            Built on a SQL parser/formatter for defining schemas in SQL, code or a mix. Supports only the proven patterns in O/R mapping. For more performance or complex situations, call custom SQL functions from generated APIs.
            <p/> 
            Supports interactive schema migration. Provides details about schema changes, schema history with validation. 
            <p/> 
            Programmers can use thread-safe APIs that avoid stale references and build efficient DB components with caching, 'auto commit' or transactions. 
            <p/>
            Join data from different data sources all using annotations. Built-in workflow features for testing and staging changes against a production DB.
            <span style="text-decoration: underline">Learn more</span>.
         </a></div>
      </div>
      
      <div id="dbGraphic" extends="GraphicBox">
         <img src="/images/dbFrontPage.png" class="infoBoxImage">
      </div>

      <hr class="boxSeparator"/>

      <div id="codeProcBox" extends="InfoBox">
         <div class="infoBoxLinkBody"><a href="/articles/parseletsIntro.html">
            <div class="infoBoxTitle">Code processor</div>
            All languages, formats, and frameworks are built with Parselets, a revolutionary new code-processor. It parses code, and provides APIs to make incremental, type-aware changes before compiling (e.g. converting field to getX/setX property)
            <span style="text-decoration: underline">Learn more</span>.
         </a></div>
      </div>

      <div id="codeProcGraphic" extends="GraphicBox">
         <img src="/images/code-proc.png" class="infoBoxImage">
      </div>


      <hr class="boxSeparator"/>

      <div id="custBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Tools and customization</div> 
            <span><a href="/doc/ide/overview.html" class="infoBoxLink">IntelliJ IDEA plugin</a></span>,
            Management UIs built from annotated domain models (<a href="/examples/programEditor.html" class="infoBoxLink">example</a>).
            Dynamic layers - java simulator right from the AST optimized for run-once code. Supports Java-syntax for layer-definition files and live programming experience for dynamic aspects of the code. Later compile those same layers for efficient runtime (<a href="/articles/dynamicRuntime.html" class="infoBoxLink">more</a>).
         </span>
      </div>

      <div id="custGraphic" extends="GraphicBox">
         <a href="https://www.jetbrains.com"><img src="/images/intelliJIDEA.svg" class="jbIcon"></a><img src="/images/cust-built-in.png" class="infoBoxImage">
      </div>


      <hr class="boxSeparator"/>

      <div id="layerBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Layers - universal config and customization</div>
            Build and run entire multi-process systems using layered components written with Java plus extensions. 
            Layers provide cleaner module directories with less copying and scaffolding. Layer directories specify dependencies, additions, and modifications preserving their design intent. Move features from layer to layer without refactoring downstream code.
            <p/>
            Layers support package install/update for maven and other package formats. They define new file formats, directory structure for downstream layers, add code-processors, modify Java types with layers. 
            <p/>
            As a project grows in size, layers offer refactoring freedom. A large type that has accumulated dependencies can be split into multiple layers, merged back again without changing the generated code. Those parts of that same type can be used in another process - e.g. a new mobile UI, or back-end service. 
           <br/>
         </span>
      </div>

      <div id="layerGraphic" extends="GraphicBox">
         <img src="/images/layeredSystems.png" class="infoBoxImage"><br/>
      </div>

      <hr class="boxSeparator"/>

   </div>

   <div class="mainContent"><div class="mainContentBody">
      <p>
   StrataCode is open source, readable code. Great for framework developers.
   </p>
   <p>
   Read more in the <a href="articles/">introduction</a>.
   </p>
   </div></div>
</div>

</body>

</html>
