<%@ import sc.lang.html.Element; %>
<html>
<head title="StrataCode Programming Language"/>
<body>

<div id="content" extends="PageLayout">

   <div class="tagBox">
      <div class="tagline">Beautifully manage your code's complexity</div>
      <div class="taglineTwo">A new dimension in coding with layers and code-processing.</div>
      <div class="intro">
        Universal customization, deep integrations. 
        Teams that works better together - empowering developers and business users alike.
      </div>
   </div>

   <div class="tagGraphic">
      <center>
         <a class="videoLink" href="videos.html"><img src="./images/screen1-small.png" height="172"><br>Watch the intro videos</a>
      </center>
   </div>

   &nbsp;
   <p>
   <div class="newRow"/>

   <%! 
      Element[][] detailBoxRows = {
          {javaDetail, featDetail, jsDetail},
          {layerDetail, ruleDetail, syncDetail},
          {htmlDetail, liveDetail, bizDetail}
      };
   %>

   <div id="InfoBox" abstract="true" 
        class=':= "infoBox " + (detailBox.visible ? "infoBoxSelected" : "")'
        clickEvent="=: updateVisible()">
      <%! 
         Element detailBox; 
         int rowIndex; 

         void updateVisible() {
            Element[] peers = detailBoxRows[rowIndex];
            for (Element peer:peers)
               if (peer != detailBox && peer.visible)
                  peer.visible = false;
            detailBox.visible = !detailBox.visible;
         }
      %>
   </div>

   <div id="javaBox" extends="InfoBox" detailBox="= javaDetail" rowIndex="= 0">
      <div class="infoBoxTitle">Java extensions</div>
      Java transpiler - reads your code, makes incremental, type-aware changes before compiling (e.g. converting field to getX/setX property)
   </div>

   <div id="featBox" extends="InfoBox" detailBox="= featDetail" rowIndex="= 0">
      <div class="infoBoxTitle">New Features</div>
      Properties, data binding, objects, multiple inheritance, and more.
   </div>

   <div id="jsBox" extends="InfoBox" detailBox="= jsDetail" rowIndex="= 0">
      <div class="infoBoxTitle">Java to Javascript</div> 
      Robust, efficient Java in the browser.  Produces readable, usable Javascript.
   </div>

   <div class="newRow"/>

   <div id="BaseDetailBox" abstract="true" class="detailBox" visible="false">
      <%! int columnIndex = 0; %> 
      <div id="openArrowContainer" style="position: relative; width: 0px; height: 0px">
         <div class="openArrow" style='= " left: " + (columnIndex * 300 + 128) + "px"'/>
      </div>
      <img id="detailCloseIcon" src="./images/closeX.png" style="float: right" clickEvent="=: BaseDetailBox.this.visible = false">
   </div>

   <div id="javaDetail" extends="BaseDetailBox">
      <div id="boxTitle" class="infoBoxTitle">Java Extensions</div>
      <ul>
         <li>Breath new life into old Java with code processing - and run it in the browser after converting to Javascript.
         <li>Keeps Java's strengths: libraries, code completion, find usages, edit time errors, refactoring, runtime speed, standard syntax, etc.
         <li>Supports all of Java's syntax and can be used to customize and refactor existing Java applications.   
         <li>Manage multi-process, multi-runtime systems.  Use shared and platform specific layers, annotations to control selective code inclusion 
         <li>Automate platform specific dependencies, project organizations, and build dependencies
      </ul>
   </div>

   <div id="featDetail" extends="BaseDetailBox" columnIndex="= 1">
      <span class="infoBoxTitle">New Features</span> - Just the right additions to Java for more concise code that's easier to read and write. 
      <ul>
         <li>Real properties in Java: automatic, customizable getX/setX conversion.
         <li>Data binding operators for Java expressions: forward :=, reverse =:, and bi-directional :=:.  Easy, fast, customizable.
         <li>New 'object' operator and @Component annotation: manage object graphs and configuration with Java types, Java syntax.
         <li>Layer level imports, public, and other annotations.  Robustness of Java but more manageable with less code.
         <li>Automated build, run framework with concise and flexible framework development hooks for synchronizing compile time and runtime assets.
         <li>Multiple inheritance: interfaces with instance properties and property assignments 
      </ul>
   </div>

   <div id="jsDetail" extends="BaseDetailBox" columnIndex="= 2">
      <span class="infoBoxTitle">Java to Javascript</span> - Run your Java code in the browser, easily and efficiently. 
      <ul>
         <li>Java to Javascript: readable JS code, usable JS objects, debuggable without a simulator</li>
         <li>Best Java translation yet - APIs callable from Javascript</li>
         <li>Layered, isomorphic HTML/Java templates - run code on client or server with one syntax</li>
         <li>Supports many standard Java classes: ArrayList, HashMap, LinkedHashMap, etc.</li>
         <li>Libraries, modules, automatic dependency detection and ordering</li>
         <li>Code patching for live code updates</li>
      </ul>
   </div>

   <div id="layerBox" extends="InfoBox" detailBox="= layerDetail" rowIndex="= 1">
      <div class="infoBoxTitle">Customization with Layers</div>
      Major improvement to object-oriented design without losing static typed integrity.
   </div>

   <div id="ruleBox" extends="InfoBox" detailBox="= ruleDetail" rowIndex="= 1">
      <div class="infoBoxTitle">Rules</div>
      Allows business and technical users to customize applications.
   </div>

   <div id="syncBox" extends="InfoBox" detailBox="= syncDetail" rowIndex="= 1">
      <div class="infoBoxTitle">Data Synchronization</div>
      Simply build a new breed of highly efficient, functional, reliable and manageable client/server applications.
   </div>

   <div class="newRow"/>

   <div extends="BaseDetailBox" id="layerDetail">
      <div class="infoBoxTitle">Customization with Layers</div>
      <ul>                                                                                                
        <li>A powerful new language for universal customization, without any upfront design.
        <li>Cut and paste refactoring of code and programs, without breaking compatibility.
        <li>Photoshop-like organization of code, files, and data.
        <li>Layers are interchangeable modules that can do more: you can simply modify features to avoid copying

        <li>With StrataCode, you manage code more effectively:
            <ul><li>Separate business rules and configuration from code </li>
                <li>Partition client from server with overlapping code that runs on both</li>
                <li>Share code between Desktop, browser, and mobile code bases</li>
                <li>Separate code based on dependencies for maximum reuse</li> 
            </ul>
        </li>
        <li>Layers for workflow, testing, customization, A/B testing.  Complements version control for updates.</li>
        <li><a href="articles/aboutLayers.html">More on layers</a>.
      </ul>
   </div>

   <div extends="BaseDetailBox" id="ruleDetail" columnIndex="= 1">
      <span class="infoBoxTitle">Rules</span> - Empower business user customization with IT in control but out of the way.
         <ul>
            <li>The ultimate tool for organizing forms: the right fields in front of the right people. 
            <li>Excel-like rules, customizing today's Java apps with auto-complete, errors and diagnostics, deployable at enterprie scale. 
            <li>Useful for styles, user interface to model (MVVM), localization, administration, and more.
         </ul>
   </div>

   <div extends="BaseDetailBox" id="syncDetail" columnIndex="= 2">
      <span class="infoBoxTitle">Data Synchronization</span> - Let's you write code in a normal way, and scales up to complex data models supporting a rich feature set.
      <ul><li>Use StrataCode synchronization to build client/server apps with almost no explicit coding.  
          <li>Put the parts of your types you want to synchronize into separate layers. 
          <li>StrataCode generates code to track property changes automatically.  
          <li>When your client or server syncs, those changes are put into a runtime layer and applied on the other side.  
          <li>You can run methods easily when values change using data binding.  
          <li>Methods can run on client, server or both.  This is no toy!  It's easy to use. (<a href="articles/syncFramework.html">more info</a>).
      </ul>
   </div>

   <div extends="InfoBox" id="htmlBox" detailBox="= htmlDetail" rowIndex="= 2">
      <div class="infoBoxTitle">HTML Templates</div>
      Dynamic HTML templates with flexibility and performance.
   </div>


   <div extends="InfoBox" id="liveBox" detailBox="= liveDetail" rowIndex="= 2">
      <div class="infoBoxTitle">Live Programming</div>
      Live, real-time programming for business and technical users.
   </div>

   <div extends="InfoBox" id="bizBox" detailBox="= bizDetail" rowIndex="= 2">
      <div class="infoBoxTitle">Scalable solutions that last</div>
      More efficient model for building and managing custom and customizable forms and applications.
   </div>

   <div class="newRow"/>

   <div extends="BaseDetailBox" id="htmlDetail">
      <span class="infoBoxTitle">HTML Templates</span> - the best features of the best template engines all in one.
      <ul>
         <li>Java objects for tags - inheritance, interfaces, multiple inheritance with flexible 'tag' and 'attribute' merge.
         <li>Generate static HTML, stand-alone JS apps or full-featured client/server applications.
         <li>Evaluate tag content on client for dynamic updates.  Evaluate others on the server for load time and SEO.  Or evaluate tags on both for the best of both worlds.
         <li>Build stateless apps for simplicity or easily build stateful apps for efficiency, lots of features, without losing robustness (e.g. bookmarkable, stateful refresh, and client-based session-failover)
         <li>Client/server API for DOM with data binding
         <li>Customize templates with layers:
            <ul>
               <li>Tools that support non-destructive editing for building layers (see transparent layers)</li>
               <li>Tag-by-tag changes: replace, append attributes and body</li>
               <li>Replace file-by-file</li>
               <li>Robust like Java cause the template generates an inuitive Java class</li>
            </ul>
         </li>
      </ul>
   </div>

   <div extends="BaseDetailBox" id="liveDetail" columnIndex="= 1">
      <span class="infoBoxTitle">Live Programming</span> - On-the-fly changes for rapid development.
      <ul>
         <li>StrataCode implements two runtimes one JVM process using a moveable partition between compiled and dynamic code.  Dynamic layers are interpreted directly from the code (right from the AST) using a type system built from compiled layers.  Dynamic layers enable live code changes, even in a stateful application, without restarts, for more powerful management UIs, faster round trip times.  Compiled layers offer compile time type-safety and performance.
         <li>One command to build, run, change or refresh, and restart as needed.  Run an application with "scc" and specify a list of layers.</li>
         <li>Customizable interactive business user tooling framework to manage layers, objects, properties, excel-like rules.</li>
      </ul>
   </div>

   <div extends="BaseDetailBox" id="bizDetail" columnIndex="= 2">
      <div class="infoBoxTitle">Better for Business</div>
      <ul>
         <li>Ideal for enterprise apps such as ERP, eCommerce, content management, CRM, personalized websites, etc. that need product evolution and customization for mission critical systems.</li>
         <li>StrataCode does for software development and integration what Excel did for the accounting world.</li>
         <li>Even sophisticated business users can manage software changes, and merge or "layer" software programs as needed </li>
         <li>Improves collaboration between developers and business users </li>
         <li>Developers will save valuable programming time, and corporations can eliminate expensive consulting</li>
         <li>Allows realtime project development between software architects, graphic designers, merchandisers, programmers, business analysts, and administrators.</li>
      </ul>
   </div>

   <div class="defaultDetailBox">
   <p>
<a href="about.html">Jeff Vroom</a> (jeff@jvroom.com) began realizing the vision for StrataCode nine years ago and is the primary contributor.  It's now just under 160K lines of readable, easy-to-follow code with no core dependencies, soon available for download.  Despite the large scope of features, you can adopt features one-by-one.  StrataCode makes a great build and configuration management tool.  Add some basic code-processing to understand and deploy your code with more power.  Leverage data binding with three easy new operators for forward, reverse, and bi-directional bindings between properties and expressions.  The dynamic Java runtime gives you one language for build files, customized code, configuration and adds an easier API to create frameworks and tools.  Run Java code in the browser.  Build quick, and adaptable management UIs or build your own tools and frameworks.
<p>
To get started, StrataCode supports git, maven, and an IntelliJ plugin that strives for seamless Java development.  StrataCode's test-suite processes code from dozens of standard Java projects, validating code integrity, building accurate type models, catching most errors during code-processing.  It's a pre-processor, or transpiler with deep code awareness driven by standard PEG-based grammars augmented by annotations to generate an intuitive AST API.  This API lets you make changes to source files incrementally by simply changing properties in the AST objects (e.g. to change the type name, set the ClassDeclaration.typeName property), or editing a list (e.g. to edit the statements of a method, add or remove statements from the MethodDefinition.body property which is a list). 
   <p>
 Already integrated with <a href="doc/webFramework.html">HTML/Javascript</a>, <a href="doc/swingCommandLine.html">Swing</a>, <a href="doc/gettingStartedAndroid.html">Android</a>, OpenGL, <a href="doc/moreFrameworks.html">JUnit, Servlets, Jetty</a>, OpenJPA, Hibernate, and <a href="doc/wicket.html">Wicket</a>.   Designed for rapid and flexible future integrations. 
   <p>
  <a href="contact.html">Contact us</a> for more information.  StrataCode's runtime and IDE are free to download and use to build applications during the trial period.  We'd love your feedback and will make source available on an as needed basis during the trial period.  We'd love your feedback on the right license and model for how to build a sustainable project that meets your needs.  We'd like to build a sustainable development tools business so StrataCode can grow with external contributions if there is enough interest.  The earlier you become a StrataCode developer, the more control you'll get in shaping the choice of license, pricing structure, and perhaps even become a share holder in the business yourself through contribution or investment.  

Do you have a project you want built?  Hire us to build it for you with StrataCode.  Perhaps you'd like to refactor a large existing code base to evolve it to a more efficient form in an incremental way.  Or build or upgrade an existing SaaS platform written in Java or need a language level integration, or need to build an IDE?  StrataCode is designed to turn existing software into great software, quickly and efficiently that will improve management of code assets long term.  We believe it's what developers need for a more powerful, reliable, secure, affordable and sustainable ecosystem.
  </p>
  <p>
Like you, we want faster software, built easier and most importantly happier users.  That means empowering not only end-users but back-office, admins, operations, designers, or other people that use computers to empower others.  That means providing management UIs, with customization so you can hand solutions off to people who can hand solutions off to people who let customers manage their own solutions.  Our goal is to run software efficiently - at the runtime level, the developer level, and all types of users including those managing the software.  For more information, get in touch with Jeff.  If you feel more comfortable using frameworks built by big companies as side-projects, he will recommend some good solutions.  If you are looking to build valuable solutions in the world, we may have a more stable solution in the long run that takes your skills to a new dimension, leveraging layers and code-processing. 
  </p>
  <p>
  Read more in these <a href="articles">articles</a>.
  </p>
   </div>
</div>

</body>

</html>
