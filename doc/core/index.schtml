<%@ import sc.lang.html.Element; %>
<html>
<head title="StrataCode"/>
<body>

<div id="content" extends="PageLayout">

   <div id="mainPanel">
      <div abstract="true" class="infoBox" id="InfoBox"/>
      <div abstract="true" class="graphicBox" id="GraphicBox"/>

      <div class="tagBox" extends="InfoBox">
         <div class="pageProductTitle">StrataCode</div>
         <div class="tagline">Beautifully manage code complexity</div>
         <div class="taglineTwo">A new dimension in coding with layers and code-processing</div>
         <div class="intro">
         Java transpiler, language extensions for declarative code, IntelliJ plugin, innovative frameworks and tools for building scalable, customizable platforms. 
         </div>
         <br/>
         <div id="actionButtons" class="actionButtons">
            <a href="/download/" class="actionButton">
               Download preview
            </a>
            <a href="/download/" class="actionButton">
               Subscribe 
            </a>
            <a href="/videos.html" class="actionButton">
               Videos
            </a>
         </div>
      </div>

      <hr class="boxSeparator"/>

      <div id="bindBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Data binding for Java expressions</div>
           Attach expressions to properties with new operators for configurable rules that run anywhere. Bind to remote data sources in the browser. Use for validation, database queries, UIs, management UIs, and more. Debuggable and scalable for programmers. Easy to customize by everyone else.
           <p/>
           <img src="/images/bindingTypes.png" class="mobileImage75">
           <br/>
         </span>
      </div>
      <div id="bindBoxGraphic" extends="GraphicBox">
         <span class="infoBoxGraphicBody">
            <div class="infoBoxTitle">Forward</div>
            <img src="/images/forwardBindExamp.png" class="infoBoxImage"><br/>
            <p/>
            <div class="infoBoxTitle">Reverse + bi-directional</div>
            <img src="/images/reverseBindExamp.png" class="infoBoxImage"><br/>
         </span>
      </div>

      <hr class="boxSeparator"/>

      <div id="componentGraphic" extends="GraphicBox">
         <img src="/images/objectGraph.png" class="infoBoxImage"><br/>
      </div>

      <div id="componentBox" extends="InfoBox">
        <span class="infoBoxBody">
           <div class="infoBoxTitle">Next gen components</div>
           Wire together components using properties. Use @Component for graphs with recursive relationships and multi-step initialization. The same source code works in both compiled and dynamic modes, all statically typed. 
           Automatic getX/setX, events, parent/child, and flexible declarative lifecycle to provide a thread-safe sandbox for components. Reduce framework dependencies in application code by injecting them using annotations and code-templates. Framework dependencies exist only in framework specific layers and in the generated code leaving application code free to be reused elsewhere.
        </span>
      </div>

      <hr class="boxSeparator"/>

      <div id="layerBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Layers - universal config and customization</div>
            Build and run entire multi-process systems using layered components written with Java plus extensions. 
            Layers provide cleaner module directories with less copying and scaffolding. Layer directories specify dependencies, additions, and modifications preserving their design intent. Move features from layer to layer without refactoring downstream code.
            <p/>
            Layers support package install/update for maven and other package formats. They define new file formats, directory structure for downstream layers, add code-processors, modify Java types with layers. 
            <p/>
            As a project grows in size, layers offer refactoring freedom. A large type that has accumulated dependencies can be split into multiple layers, merged back again without changing the generated code. Those parts of that same type can be used in another process - e.g. a new mobile UI, or back-end service. 
           <br/>
         </span>
      </div>

      <div id="layerGraphic" extends="GraphicBox">
         <img src="/images/layeredSystems.png" class="infoBoxImage"><br/>
      </div>

      <hr class="boxSeparator"/>

      <div id="sysProcGraphic" extends="GraphicBox">
         <img src="/images/multi-proc.png" class="infoBoxImage">
      </div>

      <div id="sysBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Multi-process systems</div> 
            One layered config to better manage overlaps between tools. 
            One command to build, and run client/server apps, or multi-process systems.
            Data sync of overlaps for efficient, intuitive RPC.
         </span>
      </div>

      <hr class="boxSeparator"/>

      <div id="webBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Web programming</div> 
            Templates support reactive, web components with data binding, inheritance and tag objects that expose browser features as properties.
            Build concise, customizable, efficient pages whether as a static site, client-only, server-only, or in isomorphic client/server mode.
            <p/>
            Templates are converted to Java that's transpiled to readable JS for the browser. Synchronize overlapping layers of the application to reduce the cost and complexity of client/server programming.
         </span>
      </div>

      <div id="webGraphic" extends="GraphicBox">
         <img src="/images/web-framework.png" class="infoBoxImage">
      </div>

      <hr class="boxSeparator"/>

      <div id="dbGraphic" extends="GraphicBox">
         <img src="/images/dbFrontPage.png" class="infoBoxImage">
      </div>

      <div id="dbBox" extends="InfoBox">
         <div class="infoBoxBody">
            <div class="infoBoxTitle">Persistence framework</div>
            Built on a SQL parser/formatter for complete awareness and control over both SQL schema definition and the code it maps to in the object-relational mapping.
            Generate classes from SQL or vice versa, or modify a custom schema by adding layers to the generated class. 
            <p/> 
            Track schema change from one build to the next and use a wizard to apply the generated 'alter script'. 
            <p/> 
            Use associations, mix regular column based properties with dynamic properties stored in JSON. Fetch associations using onDemand or eager strategies to reduce the number of queries to fetch a complex model. Use annotations to generate template-style queries, use the built-in API for ad-hoc queries, or generate a static method to call a stored procedure defined in SQL.
            <p/>
            The API supports, thread-safe persistence without complex and in-efficient attach/detach apis. Enable caching and use simple APIs to demarcate transactions. 
            <p/>
            Mix data from different data sources in the same class. Cache changes in memory or a separate data store for testing, staging, and easier workflow for managing database content that gets reviewed and deployed.
         </div>
      </div>

      <hr class="boxSeparator"/>

      <div id="codeProcBox" extends="InfoBox">
         <div class="infoBoxBody">
            <div class="infoBoxTitle">Code processor</div>
            All languages, formats, and frameworks are built with Parselets, a revolutionary new code-processor. It parses code, and provides APIs to make incremental, type-aware changes before compiling (e.g. converting field to getX/setX property)
         </div>
      </div>

      <div id="codeProcGraphic" extends="GraphicBox">
         <img src="/images/code-proc.png" class="infoBoxImage">
      </div>


      <hr class="boxSeparator"/>

      <div id="custGraphic" extends="GraphicBox">
         <a href="https://www.jetbrains.com"><img src="/images/intelliJIDEA.svg" class="jbIcon"></a><img src="/images/cust-built-in.png" class="infoBoxImage">
      </div>

      <div id="custBox" extends="InfoBox">
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Tools and customization</div> 
            IntelliJ IDEA plugin, 
            Management UIs built from annotated domain models.
            Dynamic layers - java simulator right from the AST optimized for run-once code. Supports Java-syntax for layer-definition files and live programming experience for dynamic aspects of the code. Later compile those same layers for efficient runtime.
         </span>
      </div>

      <hr class="boxSeparator"/>

<!--
      <div id="codeProcDetail" extends="BaseDetailBox">
         <ul>
            <li>Breath new life into old Java with code processing.
            <li>Declarative grammars generate the language model (AST), and support property changes to update the code incrementally.
            <li>Use the AST api to quickly transform code. Shared base classes provide IDE features, convert between languages.
            <li>Framework hooks for generating components, properties, processing annotations, etc.
            <li>Unlike byte-code processing, the generated code is readable and debuggable.
         </ul>
      </div>
      <div id="sysDetail" extends="BaseDetailBox">
         <ul>
            <li>One stack of layers are organized into one or more processes. 
            <li>Manage the entire build, run, refresh with a single command. 
            <li>Overlapping layers provide the foundation for generated code to manage back and forth exchange of data. 
            <li>Remote method calls are detected and handled automatically.
         </ul>
      </div>
      <div id="webDetail" extends="BaseDetailBox">
         <ul>
            <li>Flexible way to build any web application.
            <li>schtml templates bring the power of Java to web apps</li>
            <li>Java to Javascript: readable JS code, usable JS APIs, debuggable without a simulator</li>
            <li>Layered + isomorphic - run code on client, server or both with one syntax</li>
            <li>Standard Java classes: ArrayList, HashMap, LinkedHashMap, etc.</li>
            <li>Libraries, modules, automatic dependency detection and ordering</li>
            <li>Fast 'refresh' of stateful apps with code patching, supports great management UIs</li>
            <li>Data sync for seamless, rich featured, client/server app development</li>
         </ul>
      </div>
-->

<!--
      <div extends="BaseDetailBox" id="custDetail">
         <ul>
           <li>Photoshop-like layered organization of code, files, and data for manageability.
           <li>Run apps using dynamic layers for on-the-fly updates. Compile layers for runtime speed.
           <li>Build declarative management UIs on top of plain domain models that support not only management of instances, but customization of types as well.
           <li>Create new layers, and cut and paste preserving apis.
           <li>Break out 'feature layers' instead of  "one size fits all" development.
           <li>Layers are modules that can also modify features, a built-in plugin capability you can expose for certain types.
           <li>Layers also separate code for better workflows, testing, customization, A/B testing.  A complement to version control when it makes sense to keep changes separate.</li>
           <li><a href="articles/aboutLayers.html">More on layers</a>.
         </ul>
      </div>
-->
   </div>

   <div class="mainContent"><div class="mainContentBody">
      <p>
   A preview release of StrataCode is now available. Contact <a href="about.html">Jeff Vroom</a> (jeff@jvroom.com) for a download code. For those who like developing frameworks, it's a relatively small, readable, maintainable code base with no core dependencies. 
   </p>
   <p>
   We'd like to make a sustainable developer's tool that has some way to compensate the developers who build great tools. We are looking for projects to build with StrataCode, investors, and partners.
   </p>
   <p>
   Some features are not production ready <a href="status.html">(see status)</a>, but we believe it is a great tool and set of frameworks for building apps from scratch. At first it will require a fairly high level of support from Jeff. It would also be useful to refactor large existing Java code bases, supporting continual evolution during the refactoring process. It can also be used to build or upgrade an existing SaaS platform, or build your own language oriented tools in Java. 
     </p>
     <p>
     Read more in these <a href="articles/">articles</a>.
     </p>
   </div></div>
</div>

</body>

</html>
