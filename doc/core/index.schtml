<%@ import sc.lang.html.Element; %>
<html>
<head title="StrataCode"/>
<body>

<div id="content" extends="PageLayout">

   <div id="mainPanel">
      <div id="tagRow">
         <div class="tagBox">
            <div class="tagline">Beautifully manage code complexity</div>
            <div class="taglineTwo">
            A new dimension in coding with data binding, components, layers and code-processing
            </div>
            <div class="intro">
            Easy to read, declarative, concise, and separable application and framework code.
            Universal customization with layers for more code reuse, and configurability.
            Plug and play features: application, framework, deployment with unified configuration and management UIs. 
            Easier code-processing for framework developers to build robust and leverageable systems.
            Collapse and simplify the stack. 
            </div>
         </div>

         <div class="tagGraphic">
            <center>
               <a class="videoLink" href="videos.html"><img src="./images/ide-small.png" id="tagImg"><br>Watch the intro videos</a>
            </center>
         </div>
      </div>

      <div id="InfoBox" abstract="true" 
           class=':= "infoBox " + (detailBox.visible ? "infoBoxSelected" : "")'
           clickEvent="=: updateVisible()">
         <%! 
            Element detailBox; 

            void updateVisible() {
               detailBox.visible = !detailBox.visible;
            }
         %>
      </div>

      <div id="BaseDetailBox" abstract="true" class="detailBox" visible="false">
         <div id="openArrowContainer" style="position: relative; width: 0px; height: 0px">
            <div class="openArrow" style='= " left: " + 128 + "px"'/>
         </div>
         <img id="detailCloseIcon" class="closeIconSize" src="./images/closeX.png" style="float: right" clickEvent="=: BaseDetailBox.this.visible = false">
      </div>

      <div id="featBox" extends="InfoBox" detailBox="= featDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Declarative, layered code</div>
            Java with data binding, properties, components.
            Layers to merge directories, override config, modify types - blending code and configuration.
            Dynamic and compiled layers a moveable line between quick, manageable updates and efficient runtime.
         </span>
         <img src="/images/lang-feat.png" class="infoBoxImage">
      </div>

      <div id="featDetail" extends="BaseDetailBox">
         <ul>
            <li>Just the right additions to Java syntax for more concise, readable code and configuration. 
            <li>Real properties in Java: automatic, customizable getX/setX conversion.
            <li>Data binding operators for Java expressions: forward :=, reverse =:, and bi-directional :=:.  Easy, fast, customizable.
            <li>New 'object' operator and @Component annotation: manage object graphs and configuration with Java types, Java syntax.
            <li>Layer level imports, public, and other annotations.  Robustness of Java but more manageable with less code.
            <li>Automated build, run framework with concise and flexible framework development hooks for synchronizing compile time and runtime assets.
            <li>Multiple inheritance: interfaces with instance properties and property assignments 
         </ul>
      </div>

      <div id="codeProcBox" extends="InfoBox" detailBox="= codeProcDetail" >
         <div class="infoBoxBody">
            <div class="infoBoxTitle">Code processor</div>
            Parse code, make incremental, type-aware changes before compiling (e.g. converting field to getX/setX property)
         </div>
         <img src="/images/code-proc.png" class="infoBoxImage">
      </div>

      <div id="codeProcDetail" extends="BaseDetailBox">
         <ul>
            <li>Breath new life into old Java with code processing.
            <li>Declarative grammars generate the language model (AST), and support property changes to update the code incrementally.
            <li>Use the AST api to quickly transform code. Shared base classes provide IDE features, convert between languages.
            <li>Framework hooks for generating components, properties, processing annotations, etc.
            <li>Unlike byte-code processing, the generated code is readable and debuggable.
         </ul>
      </div>

      <div id="sysBox" extends="InfoBox" detailBox="= sysDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Multi-process systems</div> 
            One layered config to better manage overlaps between tools. 
            One command to build, and run client/server apps, or multi-process systems.
            Data sync of overlaps for efficient, intuitive RPC.
         </span>
         <img src="/images/multi-proc.png" class="infoBoxImage">
      </div>

      <div id="sysDetail" extends="BaseDetailBox">
         <ul>
            <li>One stack of layers are organized into one or more processes. 
            <li>Manage the entire build, run, refresh with a single command. 
            <li>Overlapping layers provide the foundation for generated code to manage back and forth exchange of data. 
            <li>Remote method calls are detected and handled automatically.
         </ul>
      </div>

      <div id="webBox" extends="InfoBox" detailBox="= webDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Web programming</div> 
            Component oriented web programming.
            Java converted to readable JS. Real time.
            Declarative component lifecycle.
         </span>
         <img src="/images/web-framework.png" class="infoBoxImage">
      </div>

      <div id="webDetail" extends="BaseDetailBox">
         <ul>
            <li>Flexible way to build any web application.
            <li>schtml templates bring the power of Java to web apps</li>
            <li>Java to Javascript: readable JS code, usable JS APIs, debuggable without a simulator</li>
            <li>Layered + isomorphic - run code on client, server or both with one syntax</li>
            <li>Standard Java classes: ArrayList, HashMap, LinkedHashMap, etc.</li>
            <li>Libraries, modules, automatic dependency detection and ordering</li>
            <li>Fast 'refresh' of stateful apps with code patching, supports great management UIs</li>
            <li>Data sync for seamless, rich featured, client/server app development</li>
         </ul>
      </div>

      <div id="custBox" extends="InfoBox" detailBox="= custDetail" >
         <span class="infoBoxBody">
            <div class="infoBoxTitle">Tools and customization</div> 
            IntelliJ IDEA plugin, dynamic and compiled layers, 
            management UIs built from annotated domain models,
            layers for feature-oriented development, plugins, and separation of dependencies for improved code reuse.
         </span>
         <a href="https://www.jetbrains.com"><img src="/images/intelliJIDEA.svg" class="jbIcon"></a><img src="/images/cust-built-in.png" class="infoBoxImage">
      </div>

      <div extends="BaseDetailBox" id="custDetail">
         <ul>
           <li>Photoshop-like layered organization of code, files, and data for manageability.
           <li>Run apps using dynamic layers for on-the-fly updates. Compile layers for runtime speed.
           <li>Build declarative management UIs on top of plain domain models that support not only management of instances, but customization of types as well.
           <li>Create new layers, and cut and paste preserving apis.
           <li>Break out 'feature layers' instead of  "one size fits all" development.
           <li>Layers are modules that can also modify features, a built-in plugin capability you can expose for certain types.
           <li>Layers also separate code for better workflows, testing, customization, A/B testing.  A complement to version control when it makes sense to keep changes separate.</li>
           <li><a href="articles/aboutLayers.html">More on layers</a>.
         </ul>
      </div>
   </div>

   <div class="defaultDetailBox">
   <p>
A preview release of StrataCode is now available. Contact <a href="about.html">Jeff Vroom</a> (jeff@jvroom.com) for a download code. For those who like developing frameworks, it's a relatively small, readable, maintainable code base with no core dependencies. 
</p>
<p>
We'd like to make a sustainable developer's tool that has some way to compensate the developers who build great tools. We are looking for projects to build with StrataCode, investors, and partners.
</p>
<p>
Some features are not production ready <a href="status.html">(see status)</a>, but we believe it is a great tool and set of frameworks for building apps from scratch. At first it will require a fairly high level of support from Jeff. It would also be useful to refactor large existing Java code bases, supporting continual evolution during the refactoring process. It can also be used to build or upgrade an existing SaaS platform, or build your own language oriented tools in Java. 
  </p>
  <p>
  Read more in these <a href="articles/">articles</a>.
  </p>
   </div>
</div>

</body>

</html>
