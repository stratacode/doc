<html extends="Example">
<head title="Simple Parser Example"/>

<body>
   <div id="content">
      <div id="exampleContent" exec="server">

      <div class="exampleTitle">Build Tag</div>

<p>
This example shows how to tag a build with info from when it was built.  Here we include a version number, git hash, timestamp, user, in the generated .java file so it's an accurate reflection of when the code was built.  There are several features demonstrated: 
<ul>
<li>how to define a property in a layer for use by subsequent layers (scmVersion).   
<li>Running shell commands in a layer definition file.
<li>Using @BuildInit annotation to initialize a runtime property to the value of a build-time expression.   You can think of build time expressions as run in the context of the buildLayer, which can reference layer components, or layer fields in any layer in the current build stack.  It can also use the "layeredSystem" property or any static methods available in the dynamic runtime.  If there are errors in the build time expression, those will be visible at compile time (TODO: support edit time resolution here like we do for schtml attributes?).
<li>How to initialize a runtime property from layered .properties files 
</ul>

Here's the buildTag layer definition file, run at build time: 
<%= sc.lang.SCLanguage.INSTANCE.styleFile("example/buildTag", "buildTag.sc", false, true) %>
It defines the layer field 'scmVersion' which is initialized by running git and parsing the result to produce an informative string that includes information about local changes in the repository at the time of the build.  The 'init' method is run just after the layer is constructed, before the start and validate methods. 

</p>

<p>
Here's the source for the BuildTag subclass that is generated to include the build info:
<%= sc.lang.SCLanguage.INSTANCE.styleFile("example/buildTag", "ExBuildTag.sc", false, false) %>

<ul>
<li> The @BuildInit annotation is a bridge between 'build time' and 'run time'.  It's used to initialize runtime properties to build time expressions.  
<li> The call to getLayerProperty looks for a build.properties in the top-level layer directory, merging those in subsequent layers.  Layer properties can be overridden using the -P option to scc that works like Java's -D.  Use: 'scc -Pbuild.tag=release', and  'getLayerProperty("build", "tag")'. 
</ul>


<div class="filename">example/buildTag/build.properties</div>
<div class="code"><pre>
<%= sc.util.FileUtil.getFileAsString(sc.layer.LayeredSystem.getCurrent().getMainLayeredSystem().getStrataCodeDir("bundles/example/example/buildTag/build.properties")) %>
</pre></div>

</p>

To compile a release build, you can override the defaults by adding a command line option:

<code>scc -Pbuild.tag=release example.buildTag</code>

      </div>
   </div>
</body>

</html>
