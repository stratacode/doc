<html extends="Example">
<head title="Management UI framework - code overview"/>

<body>
   <div id="content">
      <div id="exampleContent" exec="server">

      <div class="exampleTitle">Management UI framework - code overview</div>

      <p/>
      The management UI framework builds management UIs directly from annotated domain models. Like most management UIs, it supports creation of new instances and changing properties. It also supports editing of configuration and rules by editing layers of code, supporting flexible workflows with developers in how to manage, customize, and update the system.
      <p/> 
      There are two tree views to organize types and instances: one navigates the name space of types and instances directly. The other navigates types and instances by their organization in layers. 
      <p/> 
      Both views are kept in sync, so you can find an application type, then choose a specific layer of that type to edit.
      <p/> 
      Annotations exist to customize the UI - to hide fields, mark them read-only, and identify create methods.
      <p/> 
      
      There are three different views: the default data view which lets you navigate the types and instances of the system. When you select an instance, a form is created to let you view and edit the properties.
      <p/> 

      There is a 'type view' which lets you see and edit the code behind the way those types were configured in the source file and change that configuration. It provides structured editing with code-completion for editing data binding expression so this becomes a way to edit the rules behind the way this instance operates. Some fields and initialization values can be customized on the fly and it's possible to build rich declarative frameworks that are editable without restarts. Or detect when restarts are required and manage them.
      <p/> 
      
      There's also a code view which matches the type view, but shows you the code. It's updated on-the-fly as you make changes, or you can change the code in the code view and hit refresh as well. Or just change the files on file system and hit refresh.
      <p/> 
      The code view shows you the various formats available for each type. For StrataCode files, you can see both the source and the generated source. For schtml files, it shows the StrataCode source which is the intermediate form schtml to Java that's not generally stored on the file system.
      <p/> 

      The editor runs on the desktop using swing, or in the browser using schtml. In the browser it runs in two modes: client/server and server only mode. In client/server the editor code is compiled into both the JS and Java runtimes and it uses the sync framework to fetch data back and forth. In server only mode, a small JS file is downloaded to parse the sync framework and manage the DOM to sync integration. The same JSON sync protocol is used in both.
      <p/> 

      <table>
         <tr>
            <td>
               <a href="../images/swingEditor.png"><img src="../images/swingEditorIcon.png"></a><br>
               The swing version
            </td>
            <td>
               <a href="../images/jsEditor.png"><img src="../images/jsEditorIcon.png"></a><br>
               The schtml version
            </td>
         </tr>
      </table>
      <ul>
         <li>editor.model (1600 Lines):  Defines the key data structures behind the program editor. This layer runs both in the browser and on the server and so represents the data structures that StrataCode synchronizes.  There is EditorModel which stores the current type and selection and TypeTreeModel, which implements the tree view itself.
         <li>editor.modelImpl (2200 lines): Runs just on the server in the client/server version. This layer contains the logic which populates EditorModel and TypeTreeModel for any user interface.  It extends sys.layeredSystem in addition to the model layer.  Because sys.layeredSystem only runs on the server, this layer will only run on the server too.
         <li>editor.coreui (2400 lines): The view model which runs on both the client and the server. Contains some core user-interface code shared by both swing and the Javascript layers.
         <li>editor.swing.core (3200 lines): Implements the Swing user interface.
         <li>editor.html.core (1500 lines): Implements the Javascript user interface. Runs on both the client and the server.
      </ul>

      The swing user interface code uses data binding for all layout which is more verbose than html. 
      <p>
      This example shows significant code-reuse across platform the code is easy to navigate and maintain.  Building the client/server version from the existing desktop version involved refactoring the existing code as a first step into platform dependent and independent layers.  Code which depends on swing went into the swing/core layer, and code that depends on server features, went into the editor.modelImpl layer.  Independent code went into the editor.model layer that runs the same way in all three processes: desktop, client and server. The resulting swing version had only cosmetic changes and so ran the same, but after refactoring the two applications shared the most difficult aspects of the domain model.
     </p>
      <p>For the client/server version, the model essentially defines the overlapping parts - i.e. the info that's used on both the client and server. The model layer defines the domain model and the coreui layer defines the view model. These layers have no real framework dependencies and so can run anywhere. Most frameworks require some replication of the domain model and view model code for each UI framework or for specifying the service layer or data transfer layers. With this approach, the service and transfer classes are generated mainly just from the organization of the code. 
     </p>
      <p>
      Here is the model layer of the EditorModel class, which manages the overall domain model for the management UI framework. It has the currently selected types and instances, the current layer and other layers that make up the selected types, access to the metadata of the types and propeties. This code is included in both client and server versions of the generated class.
     </p>
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("editor/model","EditorModel.sc", false, false) %>

      Here the model layer for TypeTreeModel which is the domain model for the tree widget that browses the types. Different management UIs or aspects of management UIs might use one or the other or both in combination to provide different easily manageable views of the same types for different audiences.  For example, an admin might browse the type tree to find the 'User' object and look at all of the properties combined in all layers.  Or use the layered organization of the user properties to find some desired aspect.  A back-office employee might instead navigate the layer tree to find the specific view of only the types and properties they need for their task at hand.
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("editor/model","TypeTreeModel.sc", false, false) %>

      Here's the implementation class for the EditorModel. It runs in both the server and desktop processes. It's not included in the client version of the EditorModel class, but instead is synchronized with the client version. It uses data binding expressions to listen for changes made when synchronization events are received on the client or server. In some situations, those changes will trigger subsequent changes to synchronized properties that will be queued up until the next 'sync' with the other side.  This establishes a nice declarative dialog, using a 'do later' on the client and 'end of request' flush on the server.  
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("editor/modelImpl","EditorModel.sc", false, false) %>

      Here the server/desktop layer of TypeTreeModel:
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("editor/modelImpl","TypeTreeModel.sc", false, false) %>

      <div class="exampleTitle">Tree Widget</div>

<p>
Here's the code for the TreeView component for the client/server version.  It generates the HTML for each of the two trees in StrataCode on both the client and the server.  For an schtml file, the id of the top-level tag is the name of the file so we do not have to specify id='TreeView' here.  Data binding is used to specify the css class of the outer li tag and the span which defines the name of the tree element.  It's used to call 'toggleOpen' when you click on the +/- iconand whether to show the children list for a given node.
     </p>
<%= sc.lang.HTMLLanguage.INSTANCE.styleFile("editor/html/core", "TreeView.schtml", false, false) %>
<p>
The last 'li' tag in the file is the most interesting one.  It has the 'repeat' attribute which means it's rendered once for each element in the array. To implement a recursive tree, it extends the TreeView component which also is its enclosing class. It has an optional set of children of its own and provides unlimited levels of nesting in a simple declarative description.

<p/>
   </div>
   </div>
</body>

</html>
