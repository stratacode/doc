<html extends="Example">
<head title="TodoList Example"/>

<body>
   <div id="content"><div id="mainSection">
      <div id="exampleContent" exec="server">

      <div class="exampleTitle">TodoList Example</div>

      <p/>
      <div class="code">
         <a href="todoRun/TodoList.html">
           Go to the client-only TodoList example:<br/>
           <img src="../images/todoIcon.png"/>
         </a>
      </div>

      <p>
      This example is built in three layers: the model, the user interface, and the data.

<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/todo/model","TodoList.sc", false, false) %>

Here is the user interface, in the example.todo.jsui layer.  That layer extends the model layer so this file modifies the Todo type above.  That happens because these files have the same name and the layers use the same package.  You have access to the properties in the model layer, just like the "code behind" pattern.

<%= sc.lang.HTMLLanguage.getHTMLLanguage().styleFile("example/todo/jsui","TodoList.schtml", false, false) %>

and a separate layer to store the data:

<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/todo/data","TodoList.sc", false, false) %>

This example runs in several different modes, depending on the framework layers and options. With just the js.schtml layer, it runs in the browser only (see above).  With both the js.schtml and jetty.schtml layers, it runs in client/server mode. With just jetty.schtml, it runs in server-only mode. 

      <p>
As each model entry is changed, its value is sent to the server and saved in the session using the page's scope. By default, it uses appSession scope so that two tabs in the same browser session will be synchronized (if js.sync is included).
      <p>

Change the default scope using the servlet.options.windowScope layer for each tab to have its own state. Or set the scope attribute to request for all info to not use the session

     <p>

This test script uses the scr format and tests the domain model for flexibility
<%= sc.lang.CommandSCLanguage.getCommandSCLanguage().styleFile("example/todo/model","testTodoList.scr", false, false) %>

The web framework runs testX.scr automatically: 
<code>
    scc example/todo/clientServer -tw
</code>

For swing run:
<code>
    scc example/todo/swingmain -ts testTodoList.scr
</code>

Here's the swing UI layer:

<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/todo/swingui","TodoList.sc", false, false) %>

      </div>
   </div></div>
</body>

</html>
