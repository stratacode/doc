<html extends="Example">

<body>
   <div id="content">
      <div id="exampleContent" exec="server">

      <div class="exampleTitle">ExpertSystem Example</div>

       This example demonstrates a simple real-world business problem and how we can partition the code via layers, to separate different aspects of the code to promote better code reuse and separate files for better workflows when code is managed by a team.

       <p>
       First we'll start with a layer that defines the domain model types in the system.  This defines the core data structures in the application.  As an example, we'll use some code implementing the 'light' version of my father's expert system for decision making styles analysis.  It models what leadership decision making style a given leader should choose for a given situation, given a high/low choice for a set of factors the leader uses to categorize the situation.

       <p>
       There are two empty enumerated types in the example.expertSystem.modelTypes layer.  The enum values themselves are specified declaratively in a separate layer to show how we can separate assets to partition the file ownership.  The code owned by the programmer, the names and values of the strings by the technical business person.

In the ExpertSystem, we have a fixed number of FactorValue definitions so we'll use an 'enum' in Java.  
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelTypes","FactorValue.sc", false, false) %>

The LeadershipStyle enum defines the ways a leader can make a decision:
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelTypes","LeadershipStyle.sc", false, false) %>

And the situation we are modelling:
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelTypes","Situation.sc", false, false) %>

And the list of factors used by the leader to describe the situation:
<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelTypes","SituationalFactor.sc", false, false) %>

      Now a second layer, developed by the programmer but maintained by the business domain specialist for the names.  The first two files define numerated options using enum types above.

<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelNames","FactorValue.sc", false, false) %>

<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelNames","LeadershipStyle.sc", false, false) %>

      This file also just populates an enumerated type but because it has lots of text, it is written in .sct, StrataCode's template language.  .sct is just Java turned inside out.  You start in template mode, then break into Java and back out again with the JSP-like escape tags. It's possible to convert any .sc file to a .sct file and back again, or cut and paste between the two. Because .sct is the base class for .schtml, it and other template-based formats variants are as flexible as Java.

<%= sc.lang.TemplateLanguage.getTemplateLanguage().styleFile("example/expertSystem/modelNames","SituationalFactor.sct", false, false) %>

      Now a third layer for the rules.  Here's where we separate the unique domain specific code-logic.  There are several approaches: use properties, components, and data binding rules as in the unit converter may be the primary one.  Here we look at a different one, used for state-transition tables as required in this expert system app.  In Java, we express these using a nested set of switch statements.  In StrataCode, we can separate this code to make it manageable by technical domain experts: 

<%= sc.lang.SCLanguage.getSCLanguage().styleFile("example/expertSystem/modelRules","Situation.sc", false, false) %>

      </div>
   </div>
</body>
</html>
