<html extends="ArticlePage">
<head title="Parseles - Parse a Model and Back Again"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>
## Parselets: Parsing and modifying code

StrataCode is built using a custom parser/formatter called Parselets. It's based on a PEG grammar that consists of four basic types of matchers - Sequence, OrderedChoice, Symbol, and SymbolChoice. Each grammar is built from instances of these four base classes, or higher level classes that extend these called Parselets. Each parselet has additional metadata it can specify to do more than just parse. They can create instances of a particular type of AST node, set properties on nodes, collect lists, and propagate values up the hierarchy. In this way, they build a very reasonable AST tree directly from the declarative grammar. 

Parselets also supports going in the reverse direction using the same grammar. The AST can be converted back to the code by reversing the rules it used to parse it. Further, it watches for changes to properties in these AST nodes and invalidates/revalidates the code version efficiently. So from a simple grammar, it produces a full on API for read, modify, write for that format that works incrementally, preserving even comments, spacing and information in elements that are not changed.

StrataCode is entirely built on Parselets including grammars for Java, sc*, javascript, html, xml, the DDL aspects of postgresql, css, and more. 

The Java to Javascript and StrataCode to Java transpilers are built with parselets as is the IntelliJ plugin. 

Parselets supports error recovery when parsing a file that does not match the grammar as used in the IDE. 

It also includes the ability to take diffs between one version of a file and the next and to do a fast 'reparse' of the AST - useful for fast editing of large files in the IDE.

AST's can be serialized and restored. The parse-node tree can also be serialized to speed up reparsing the same file.

Grammars for parselets languages get a huge head start on building an IntelliJ plugin. There is some straightforward tuning that goes into making the 'partial values' parse more accurate. 

<% ) %>
   </div>

   </div></div>
</body>

</html>

