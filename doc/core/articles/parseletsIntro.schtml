<html extends="ArticlePage">
<head title="Parseles - Parse a Model and Back Again"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>
## Parselets: Parsing and modifying code

Parselets is a Java library for building parsers using ordinary Java code for rapid development. Add annotations to the grammar elements to assemble the <i>abstract syntax tree</i>, the API for classes, statements, variables or other parsed things. With Parselets, this API also supports changes to the model that update the source code. Localized changes in the model are localized in the code, preserving surrounding comments and formatting not stored in the AST.

<img src="/images/code-proc.png" class="centerImageBlock"/>

The main benefit of Parselets over other parsers is how quick it is to develop new grammars and complete APIs for manipulating the contents of a given file format. With more annotations, grammars support great partial matches suitable for IDE editing. Easily support syntax highlighting, error detection and more features.

Like most PEG grammars, parselets are easily composed, extended, modified, etc. 

The [Java to Javascript converter](/articles/javaToJavascript.html) transforms a Java AST into a JS AST using shared parselets and base-classes. To convert a Java array to a JS array, just change the language and reformat. 

PEG parsers are composed of four basic types of matchers: a Symbol, SymbolChoice, Sequence, or OrderedChoice. There are parselet classes for each of these types and also IndexedChoice for a faster matching that's useful in some cases. Some language constructs are created directly from these primitives, others use subclasses like KeywordSpace inherited from a BaseLanguage. 

A Sequence parselet can specify an AST class to be created when that node is matched. The parts of the sequence map populate properties of that class. There's a descriptor string associated with the parselet that contains this mapping that looks like: "className(mapping1,mapping2)". Where the mapping strings can be empty to skip the value, the name of a property, * to inherit child mapping, or . to pass through the matched value. When className is not provided, the mapping can be '' for any slots that are included as part of the string semantic value. The value [] can be used to add that slot to an accumulated array value.

### Example grammars

StrataCode is built on Parselets including a [base language](/doc/grammars/baseGrammar.html) for shared parselets like whitespace. There's a simple [pattern language](/doc/grammars/patternGrammar.html) used for bi-directional parameters in URLs. There's a [Java language grammar](/doc/grammars/javaGrammar.html), [SC language grammar](/doc/grammars/scGrammar.html), [SC template language](/doc/grammars/templGrammar.html), [schtml](/doc/grammars/htmlGrammar.html), [javascript](/doc/grammars/jsGrammar.html), xml, and a [sql ddl for Postgres](/doc/grammars/sqlGrammar.html).

Many of these formats can be used from the IntelliJ plugin that's built on parselets.  

### Performance

Parselet grammars are not as fast as table-driven parsers but do use indexed choice primitives where possible. For the sc formats performance is pretty good without having done much work on performance tuning overall.

AST's and the layout of the parse-node tree can be serialized and restored to speed up the parsing operation on files that have not changed.  

Parse-node trees also take up more memory for the information used to do the incremental generation. There are a few optimizations still to be made to easily reduce the amount of memory these parse-node trees take up, and they only need to really be in memory for the process of parsing a file initially and later transforming one incrementally.

### Doc

Read more in the [doc](/doc/parser.html).

<% ) %>
   </div>

   </div></div>
</body>

</html>

