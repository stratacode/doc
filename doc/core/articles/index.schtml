<html extends="ArticlePage">
<head title="StrataCode Articles"/>

<body>
   <div id="content">
       <div id="pageContent">
           <h2>StrataCode Intro</h2>
           by Jeff Vroom
           <p>
           StrataCode lets programmers more easily build customizable software platforms using a code-processing framework, including a complete Java implementation that provides full code-awareness of Java systems as well as APIs to make incremental changes.  StrataCode adds missing declarative operators to Java for object instances, and lifecycle, multi-stage object initialization, and data binding that let you build declarative, reusable, efficient applications out of existing Java code.  This system makes it easy to build management UIs directly from application objects and metadata which can then be customized using layers.  The system provides all of the difficult features required by a fully customizable SaaS platform that supports excellent tooling and long-term code lifecycle management.
           </p>
           <p>
           StrataCode's design supports separating framework and application code, reducing code-copies of the domain model (i.e. the core business logic) making it easier to build, maintain and change.  The code-preprocessor preserves static typing for strong, flexible frameworks and a new level of code-reuse, and deployment efficiency.
           </p>
           <p>
           This is a long-term project, coming out of incubation, written primarily by one programmer.  It was inspired by my twenty year career building frameworks and the desire for a set of frameworks and tools that I felt would provide me with maximum leverage for building a customizable platform.  Now as I use it, I wonder if it might contribute to a healthy ecosystem of innovation, and collaboration among developers selecting only the essential software patterns to build efficient, customizable, and robust systems from readable, maintainable code.  
           </p>
           <p>
           StrataCode has taken a leaner approach than most Java frameworks and has essentially no library dependencies beyond what's provided in the Java runtime.  Before this project, I spent many years designing in committees, under time-pressure and this design built up over many years in resistance to compromises made in previous designs.  I believe in the "big book" of software design patterns, and that we need to limit flexibility of frameworks as much as expand them to improve manageability.  We need adherence to standards both for respect of the work our predecessors contributed towards computing, as well as for those who have invested energy learning from them.</p> 
           <p>StrataCode adds only two new keywords "object" and "override" and three new operators ":=", "=:" and ":=:" so you can probably read StrataCode without much effort.  I believe StrataCode has evolved into a nimble, easy-to-read code base, where problems are solved quickly, where fewer dependencies increases security, and reduces long term cost and complexity.  But it's definitely not for everyone so you be the judge if it's right for you.
           </p>
           <p>
           StrataCode uses its own code-processing library, built in Java, that makes it easy to add and debug parsers for new languages.  It includes code-processing techniques, format converters, etc. and supports easy, incremental read-modify-write of code from a single declarative grammar that automatically builds the AST.  StrataCode uses code-processing to add extensions to Java for 'layering' components and configuration, as well as a template language, and client/server programming model.  It's so easy to build code-processing, it reliably converts Java to Javascript.   There's an intelliJ plugin that works a lot like Java and enough framework integrations to make it usable to build applications today.  I've waited for a long time to release StrataCode.  I wanted a tool I wanted to use rather than build.  I'm curious if there are other developers who enjoy it as well.  If so, please get in touch and let's build great software together.
           <p>
           Read more about on how to <a href="codeLeverage.html">leverage your code</a> or jump straight to the <a href="../doc">documentation</a> to learn more.
           </p>
           &nbsp;
           <p/>
       </div>
   </div>
</body>

</html>
