<html extends="ArticlePage">
<head title="StrataCode Intro"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent">
           <h2>StrataCode Intro</h2>
           by Jeff Vroom, 5/8/2020
           <p>
           Thank you for reading more about StrataCode. This has been primarily a solo project, inspired by twenty years of building tools and frameworks for enterprise software companies. Like many programmers, I recognized the power of declarative patterns like HTML, CSS, and SQL to give architectural leverage when building systems.  I spent a lot of time designing and building platforms and frameworks that make application development easier with declarative features like data binding. In particular, how to prevent dependencies in the code from turning a nice modular structure into a giant hairball. It's like when you pile string into a drawer, it comes out a tangled mess. A given class in a complex system starts accumulating dependencies on code and at some point some direct or indirect dependency disrupts the nice module structure.
           </p>
           <p>
           The second platform I helped design incorporated layers of configuration, to enable reuse without copying, and to ensure one-way dependencies between modules. The success of that platform led me to wonder if layers should be the primary organizing abstraction for both code and configuration.
           </p>
           <p>
           Before this project, I spent many years designing in teams, and committees, under time-pressure and with politics. The design for StrataCode built up in resistance to compromises made in previous platforms. I've taken the time to build it the right way, including the simplest code that solves the problem.
           </p>
           <p>
           I believe in a "big book" of software design patterns, in the way that Paul Erdos talked of a big book of mathematical proofs. 
           The most efficient platforms use patterns from the book, and express them with a balance of simplicity and flexibility. They consider the entire lifecycle of development - from rapid prototyping to refactoring of large code bases. They ensure traceability of code paths, readability of code, separation of concerns, compatibility as code evolves, and should model complete systems, not just one process at a time.
           </p>
           <p>
           I believe that layers are a missing fundamental pattern in this book in how we organize programs. They have many uses, particularly as systems grow. This project answers the question, what if libraries, frameworks and tools were built from the ground up using layers and code-processing? Even if you are not in the market for a new platform, you mind find something useful, whether it's one of the flexible libraries or a design pattern.
           </p> 
          <p>
          See the <a href="/status.html">status</a> page for up-to-date information on quality and missing features.
          </p>
          <p>
          I'd very much appreciate <a href="../contact.html">feedback</a> and am looking for developers who'd like to help, projects to build, companies who'd like to use it, investors and partners in general.
          </p>
          <p>
          Read more about on how to <a href="codeLeverage.html">leveraging your code</a> or jump straight to the <a href="/doc/">documentation</a>, or <a href="/examples/">examples</a> to learn more. <a href="/download/">Download or signup for updates</a>.
           </p>
           <p>
           &nbsp;
           <p/>
       </div>
   </div></div>
</body>

</html>
