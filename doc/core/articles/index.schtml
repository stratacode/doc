<html extends="ArticlePage">
<head title="StrataCode Intro"/>

<body>
   <div id="content">
       <div id="pageContent">
           <h2>StrataCode Intro</h2>
           by Jeff Vroom
           <p>
           StrataCode lets programmers more easily build customizable software using code-processing (aka transpilation). It parses standard Java with full type-awareness and provides APIs to read and edit Java source code incrementally. The StrataCode language adds a few missing declarative operators to Java for object instances, and components with flexible lifecycle, and data binding that let you build declarative, reusable, efficient applications backed by existing Java code.  This system makes it easy to build management UIs directly from application objects and metadata which can then be customized using layers.  The system provides all of the difficult features required by a fully customizable SaaS platform that supports excellent tooling and long-term code lifecycle management.
           </p>
           <p>
           StrataCode's design supports separating framework and application code, reducing the number of times you need to copy the logic needed for your business problem (called the "domain model"). This makes it easier to build, maintain and change core business logic for a more efficient business. The code-processor preserves static typing for strong, flexible frameworks and a new level of code-reuse, and deployment efficiency.
           </p>
           <p>
           This has been primarily a solo project, inspired by twenty years of building tools and frameworks and the desire for a system that offers architects maximum leverage for managing a complex system which is used and customized by a wide audience. I'm particularly picky when it comes to frameworks, tools, etc. Spring applications have sprawling dependency graphs, tend to generate large configuration files that are difficult to debug. React is harder to learn than it should be, the state model is confusing and when things don't work, it's also hard to debug. There's no built-in declarative client/server and cross language platform that I've found that competes with the core features in StrataCode.
           </p>
           <p>
           StrataCode has taken a leaner approach than most Java frameworks and has essentially no library dependencies beyond what's provided in the Java runtime.  Before this project, I spent many years designing in committees, under time-pressure and this design built up over many years in resistance to compromises made in previous designs.  I believe in the <abbr title="Paul Eros - God has the Big Book, the beautiful proofs of mathematical theorems are listed here.">
big book</abbr> of software design patterns, and that we need to limit flexibility of frameworks as much as expand them to improve manageability of applications, plugins, and the resulting ecosystems. It's best to conform to industry standards out of respect for our predecessors and to make code readable.</p> 
           <p>StrataCode supports standard Java files as well as a smally family of formats which support a super-set of Java. The most important formats are:</p>
           <ul>
            <li>.sc for Java code using the new features 
            <li>.sct for code that is primarily text content. It is JSP-like but implemented as a one-pass translation to Java for better typing, syntax errors, and debugging.
            <li>.schtml which extends .sct with tags class implementations that map onto Java in a simple, powerful, more debuggable way.
           </ul>
           <p>
          The StrataCode core language adds three new keywords: "object", "override", and "scope" and three new operators for data binding: ":=", "=:" and ":=:". My hope is that most Java developers can just read StrataCode without much training when using the IDE. For me, StrataCode has evolved into a nimble, easy-to-read and manage code base. I can solve quickly and easily and the test suite grows to be sure problems stay fixed. I have built prototypes for management UIs that are complex enough that I know I can build anything with StrataCode. What I like most is is the power of having a code-pre-processor for building simple, declarative frameworks. You can then reuse application code in various ways - client-only, client/server, server-only, compiled to Javascript, with many framework options - per-window, per-request. Move tags from running on the client to on the server by setting an annotation. Running an A/B test of that new configuration, and merging the result as a new step in your deployment process. Build a management UI that automates that process in a constrained environment so you can offload a powerful type of customization. Use dynamic code and 'refresh' powerfully to reduce the round-trip times for common operations, such as editing a web-page that's backed by lots of logic and state.</p>
          <p>
          One of the benefits of the limited 3rd-party dependencies and code-preprocessing approach includes benefits to security. Fewer components in your supply chain and more oversight of the code that's being deployed. The code-processing phase makes it easy to add rules to enforce security constraints at compilation time, or inject code at runtime. You can build custom versions for specific individuals as a 'watermark' or add tooling for signing or scrambling important code that's seamless to your developers. When you use declarative frameworks for app building, you can require layers that implement security rules and provide easy auditing of APIs, usage, etc. While many businesses have benefited today from security and monitoring frameworks that use byte-code enhancement, the use of code-processing lets you do this and more in a way that's more debuggable, flexible and under your control.
           </p>
           <p>
           StrataCode uses its own code-processing library called Parselets, built in Java, that makes it easy to add and debug annotated grammars that provide:
           <ul>
           <li>Generation of language model AST 
           <li>An incremental read-modify-write API for the AST with base classes that provide all language features
           <li>Partial values parse mode - for finding a reasonable AST for the given incomplete file 
           <li>Fast, incremental 'reparse' so you can get fast edits of large files
           <li>Save/restore of AST and separate store of parse-node tree for more efficient tooling
           <li>Type awareness and manipulation, navigation, and syntax highlighting apis
           <li>Usage and code completion apis and indexes required to make the fast
           <li>Change language and reformat - to build easier cross language translation of nodes (e.g. JS array to Java array)
           </ul>
           StrataCode uses this code-processing framework (or perhaps the right term now is "transpilation framework") to add extensions to Java for 'layering' components and configuration, as well as a template language, and client/server programming model. It's easy enough to build code-processing applications. I built a Java to Javascript converter that was fairly decent in just three months. After the first year of using it and fixing more edge cases, it became reliable enough to use for me.
           </p>
           <p>
           As I started building with layers, I realized the extra complexity of the code was a big hurdle. At ATG, learning how to manage layered configurations was the most difficult part of the training process for new developers. Once they got it, they understood how to use it and why it was important. But we lacked necessary tools for these developers to see and manage the complexity. 
           To address these problems, I spent a long time building a full featured, (mostly) robust IntelliJ plugin. It has a "layers view" that shows the ordered set of layers that supports normal operations like find usages, up/down layer, debugging, navigation to/from generated source, and wizards for create layer, modify type. The code is easy to extend and improve so it's potentially an excellent base for those interested in building development tools, and custom frameworks. 
           </p>
           <p>
           I've had only a few developers who've built test code and one company has used the Java type-system in their product so it's early days for sure. Stratacode.com is the first production deployment :)
           </p>
           <p>
           Read more about on how to <a href="codeLeverage.html">leverage your code</a> or jump straight to the <a href="../doc">documentation</a> to learn more.
           </p>
           <p>
           &nbsp;
           <p/>
       </div>
   </div>
</body>

</html>
