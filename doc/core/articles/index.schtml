<html extends="ArticlePage">
<head title="StrataCode Intro"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent">
           <h2>StrataCode Intro</h2>
           by Jeff Vroom, 1/8/2020
           <p>
           StrataCode lets programmers build customizable software using code-processing tools including code editing, transpilation, and language-to-language converters. It parses standard Java with full type-awareness and provides APIs to read and edit Java source code incrementally. StrataCode includes it's own language extensions in the '.sc' format for more declarative code.
           Management UIs are created automatically from annotated application classes and objects, and customized using annotations and layers. The system is still evolving but already provides many of the difficult features required by a fully customizable SaaS platform that supports excellent tooling and long-term code lifecycle management.
           </p>
           <p>
           StrataCode's design supports separating framework and application code, reducing the number of times logic is copied for a business problem. This makes it easier to build, maintain and change core business logic for a more efficient business. The code-processor preserves static typing for strong, flexible frameworks and a new level of code-reuse, and deployment efficiency.
           </p>
           <p>
           This has been primarily a solo project, inspired by twenty years of building tools and frameworks and the desire for a system that offers architects maximum leverage for managing a complex system which is used and customized by a wide audience. Before commiting to support it for others, I wanted to to make it my preferred development platform and that's taken a long time.
           </p>
           <p>
           One reason is that StrataCode has taken a leaner approach than most Java frameworks and has essentially no dependencies outside of the JDK for the code-processor. Before this project, I spent many years designing in teams, and committees, under time-pressure and this design built up in resistance to compromises made in previous designs. I've tried to take the time to build it the right way, that includes the simplest code to solve the problem. 
           <p>
           I believe in a "big book" of software design patterns, in the way that Paul Erdos talked of a big book of mathematical proofs. 
           To me layers add an important missing pattern in this book in how we organize programs. 
           </p>
           <p>
           I've observed that the most efficient platforms use patterns that are in the book, and express them flexibly, considering the entire lifecycle of development - from rapid prototyping to refactoring of large code bases. Code processing and dynamic layers let developers use data binding, components, properties, templates, and data sync for both excellent runtime speed and with live programming.
           </p>
           <p>
           Most applications use different syntaxes for code and configuration but layers provide a new option. Configuration that must be separated from code can be split off into a new layer that's dynamic. The rest of the code does not have to change so this can be performed as needed by QA or devops.
           </p>
            <p>
           Another big book requirement is traceability throughout the system. Code paths should be traceable at edit time (find usages, etc), and debug time (readable stack traces, toString methods). It should include traceable artifacts for deployment including all entry points, ports, APIs, etc. for security and monitoring. Error messages and logs should be readable and support traceability to gather artifacts related to an individual operatation. 
           </p> 
           <p>
           To be complete, the big book should model not just one process at a time, but the complete system. StrataCode provides a natural way to take one set of code assets and produce code and configuration for any number of processes. Client and server can share configuration or code with shared layers. Dependencies can be automatically installed, systems configured, etc. Management UIs for the system can be auto-generated as well and the system's ability to detect and respond to changes made can provide fast, minimal updates.
           </p>
          <p>
          It's taken a long incubation period for all of these concepts to come together at a usable level of quality, with an IntelliJ IDEA plugin that makes the concepts more approachable.
          In developing the management UI framework, I finally feel comfortable building anything. Bugs or missing features do show up more often than I'd like but they are usually easy to fix or add. 
          </p>
          <p>
          See the <a href="/status.html">status</a> page for up-to-date information on quality.
          </p>
          <p>
          I'd very much appreciate <a href="../contact.html">feedback</a> and am looking for developers who'd like to help, projects to build, companies who'd like to use it, investors and partners in general.
          </p>
          <p>
          Read more about on how to <a href="codeLeverage.html">leveraging your code</a> or jump straight to the <a href="/doc">documentation</a> to learn more.
           </p>
           <p>
           &nbsp;
           <p/>
       </div>
   </div></div>
</body>

</html>
