<html extends="ArticlePage">
<head title="StrataCode Intro"/>

<body>
   <div id="content">
       <div id="pageContent">
           <h2>StrataCode Intro</h2>
           by Jeff Vroom
           <p>
           StrataCode lets programmers build customizable software using code-processing (aka transpilation). It parses standard Java with full type-awareness and provides APIs to read and edit Java source code incrementally. The StrataCode language supports normal Java plus a few key syntax changes to support more declarative applications.
           Management UIs can be created directly from annotated application classes and objects, and customized using layers. The system provides all of the difficult features required by a fully customizable SaaS platform that supports excellent tooling and long-term code lifecycle management.
           </p>
           <p>
           StrataCode's design supports separating framework and application code, reducing the number of times you need to copy the logic needed for your business problem (called the "domain model"). This makes it easier to build, maintain and change core business logic for a more efficient business. The code-processor preserves static typing for strong, flexible frameworks and a new level of code-reuse, and deployment efficiency.
           </p>
           <p>
           This has been primarily a solo project, inspired by twenty years of building tools and frameworks and the desire for a system that offers architects maximum leverage for managing a complex system which is used and customized by a wide audience. Before releasing it to others, I wanted to to make it my preferred development platform and that's taken just about ten years to achieve.
           </p>
           <p>
           StrataCode has taken a leaner approach than most Java frameworks and has essentially no library dependencies outside of the JDK. Before this project, I spent many years designing in committees, under time-pressure and this design built up over many years in resistance to compromises made in previous designs.  I believe in the <abbr title="from Paul Erdos, mathematician who believed in an essential 'Big Book' of proofs.">
big book</abbr> of software design patterns, and that we need to limit flexibility of frameworks as much as expand them to improve manageability of applications, plugins, and the resulting ecosystems. It's best to conform to industry standards out of respect for our predecessors and to make code readable.</p> 
           <p>StrataCode supports standard Java files as well as a smally family of formats which support a super-set of Java. The most important formats are:</p>
           <ul>
            <li>.sc for the StrataCode language feature extensions to Java
            <li>.sct for code that has lots of text embedded in it. It is JSP-like but implemented as a one-pass translation to Java for less potential for confusing code, better typing, syntax errors, and debugging.
            <li>.schtml which extends .sct with tags class implementations that map onto Java in a simple, powerful, more debuggable way.
            <li>.scr for test scripts built using the command line language
           </ul>
           <p>
          The StrataCode core language adds three new keywords <i>object</i>, <i>override</i>, and <i>scope</i> and three new operators for data binding :=, =: and :=: My hope is that most Java developers can just read StrataCode without much training when using the IDE. For me, StrataCode has evolved into a nimble, readable code base. I can debug problems quickly and the test suite grows to be sure problems stay fixed. 
          </p>
          <p>
          I have built prototypes for management UIs that are complex enough that I know I can build anything with StrataCode. What I like most is is the power of having a code-processor for building simple, declarative frameworks. You can then reuse application code in various ways - client-only, client/server, server-only, compiled to Javascript, with many framework options - per-window, per-request. Move tags from running on the client to on the server by setting an annotation. Running an A/B test of that new configuration, and merging the result as a new step in your deployment process. Build a management UI that automates that process in a constrained environment so you can offload a powerful type of customization. Use dynamic code and 'refresh' to reduce the round-trip times for common operations, such as editing a web page that's backed by lots of logic and state.</p>
          <p>
          Going forward, one of the major questions you have to ask of your frameworks is how secure are the applications built with that solution. StrataCode lets you reduce the number of frameworks and framework patterns in your solution, replacing libraries with code-generation patterns. I believe this approach improves the strength of the patterns you do use. Framework code can be built to establish secure defaults, and enforce code boundary contraints at the structure level. Frameworks can improve security by having a global view of all application code: creating lists of all queries, all public web pages, all exposed rpc methods and using those lists to build contracts enforced by your database, proxy etc. Set default annotations at the layer, class, or property level so code does the right thing by default. Use layer sandboxes to expose just the right public apis, and enforce the just right security constraints for the role of that portion of the code.  Today, it's common practice to use byte-code enhancement on your compiled code to insert security and monitoring. You can do the same thing and more with code-processing because the result is readable and debuggable.
           </p>
           <p>
           StrataCode uses its own code-processing library called Parselets, built in Java. Grammars are built from a few standard parsing operators (PEG). Those grammars are then annotated with metadata to obtain a fully featured language including:
           <ul>
           <li>Generation of language model AST 
           <li>An incremental read-modify-write API for the AST with base classes that provide all language features
           <li>Partial values parse mode - for finding a reasonable AST for the given incomplete file 
           <li>Fast, incremental 'reparse' so you can get fast edits of large files
           <li>Save/restore of AST and separate store of parse-node tree for more efficient tooling
           <li>Type awareness and manipulation, navigation, and syntax highlighting apis
           <li>Usage and code completion apis and indexes required to make the fast
           <li>Change language and reformat - to build easier cross language translation of nodes (e.g. JS array to Java array)
           </ul>
           StrataCode uses this code-processing framework (or perhaps the right term now is "transpilation framework") to add extensions to Java for 'layering' components and configuration, as well as a template language, client/server programming model, and all of it's framework integrations. Even translating from one language to another is feasible without a ton of code.
           </p>
           <p>
           Without proper tooling, or understanding of how layers work, reading layered code can be more challenging. Fortunately StrataCode includes a full-featured IntelliJ plugin. It has a layers view, supports find usages, up/down layer, debugging of both StrataCode and the generated source, navigation to/from generated source, and wizards for create layer, modify type. The code is written to be easy to read, debug and improve so it's potentially an excellent base for those interested in building development tools, and who want to work on their own frameworks. 
           </p>
           <p>
           This is still early days for StrataCode. I've had only a few friends who've built sample applications and one company has used the APIs in their product. The test suite contains over a million lines of Java from 3rd party projects, and lots of samples and tests of the new frameworks and features. If you have some curiosity and patience for a project in the early days, it might be worth your time to try it out. 
           </p>
           <p>
           I'd love your <a href="../contact.html">feedback</a> and am looking for developers who'd like to help, companies who'd like to use it, partners and investors.
           </p>
           <p>
           Read more about on how to <a href="codeLeverage.html">leverage your code</a> or jump straight to the <a href="/doc">documentation</a> to learn more.
           </p>
           <p>
           &nbsp;
           <p/>
       </div>
   </div>
</body>

</html>
