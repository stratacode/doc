<html extends="ArticlePage">
<head title="StrataCode Intro"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent">
           <h2>StrataCode Intro</h2>
           by Jeff Vroom, 5/4/2020
           <p>
           Thank you for reading more about StrataCode. This has been primarily a solo project, inspired by twenty years of building tools and frameworks for enterprise software companies. Like many programmers, I recognized the power of declarative patterns like HTML, CSS, and SQL to give architectural leverage when building systems.  I spent a lot of time designing and building platforms and frameworks that make application development easier with declarative features like data binding. In particular, how to prevent dependencies in the code from turning a nice modular structure into a giant hairball. It's like when you pile string into a drawer, it comes out a tangled mess. A given class in a complex system starts accumulating dependencies on code and at some point some direct or indirect dependency disrupts the nice module structure.
           </p>
           <p>
           The second platform I helped design incorporated layers of configuration, to enable reuse without copying, and to ensure one-way dependencies between modules. The success of that platform led me to wonder if layers should be the primary organizing abstraction for both code and configuration.
           </p>
           <p>
           Before this project, I spent many years designing in teams, and committees, under time-pressure and with politics. The design for StrataCode built up in resistance to compromises made in previous platforms. I've taken the time to build it the right way, including the simplest code that solves the problem.
           </p>
           <p>
           I believe in a "big book" of software design patterns, in the way that Paul Erdos talked of a big book of mathematical proofs. 
           The most efficient platforms use patterns from the book, and express them with a balance of simplicity and flexibility. They must consider the entire lifecycle of development - from rapid prototyping to refactoring of large code bases. 
           </p>
           <p>
           I found that layers are a missing fundamental pattern in this book in how we organize programs. They allow one syntax to be used for code and configuration. Configuration can initially be built into the code and broken out into a new configuration layer as needed. Some layers in the system can be dynamic and interpreted for live programming and others compiled for efficiency. This sliding line becomes a way that even large systems can customized without long round-trip times.
           </p>
            <p>
           Another important requirement for platforms is traceability. Code paths should be traceable at edit time (find usages, etc), and debug time (readable stack traces, toString methods). It should include traceable artifacts for deployment including all entry points, ports, APIs, etc. for security and monitoring. Error messages and logs should be readable and support traceability to gather artifacts related to an individual operatation.
           </p> 
           <p>
           To be complete, a platform should be able to model an entire system, not just one process at a time. StrataCode provides a natural way to take one set of code assets and produce code and configuration for any number of processes, resources, machine images etc. This design has a number of benefits, solving otherwise hard problems declaratively, sharing code and configuration with layers where it makes sense in the design. 
           </p>
          <p>
          It's taken a long incubation period for all of these concepts to come together at a usable level of quality, with an IntelliJ IDEA plugin that helps provide a familiar set of tools for Java programmers. 
          Today it is finally a minimum viable platform to build anything. With the engine and rapid ability to add new formats, it's designed to integrate with anything as well. 
          </p>
          <p>
          See the <a href="/status.html">status</a> page for up-to-date information on quality.
          </p>
          <p>
          I'd very much appreciate <a href="../contact.html">feedback</a> and am looking for developers who'd like to help, projects to build, companies who'd like to use it, investors and partners in general.
          </p>
          <p>
          Read more about on how to <a href="codeLeverage.html">leveraging your code</a> or jump straight to the <a href="/doc/">documentation</a>, or <a href="/examples/">examples</a> to learn more. <a href="/download/">Download or signup for updates</a>.
           </p>
           <p>
           &nbsp;
           <p/>
       </div>
   </div></div>
</body>

</html>
