<html extends="ArticlePage">
<head title="Layered Build and Packaging"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>

## Layered build tool  

The 'scc' command provided by StrataCode provides many of the same capabilities as a standard build tool like maven or gradle but is designed a bit differently. On the surface, project files are written using Java syntax with StrataCode extensions. A layer directory can be either a typical monolithic project directory, or an overlay on top of the merged contents of the base layers. 

These overlay layers are best when each layer has fewer files and higher <i>customization intent</i>. The set of files help define why this layer exists - to help customize it from a previous configuration. 

A layer can extend other layers, add maven packages, set properties of the layer, and define methods that run in the: init, start, and validate. Where all layers are first initialized, then started, then validated.

<% ) %>

<%= sc.lang.SCLanguage.INSTANCE.styleFileNoTypeErrors("servlet/lib","lib.sc", true) %>

<%= MarkDownPage.markDown(%>

### Evolutionary modularization

Using layers, it's an incremental process to break apart a module into more than one piece, for example factoring out all database or UI so that a new database or UI can be added. This allows you to start with a more monolithic design and refactor as parts need to be reused in a new configuration.

### Code-processing

Using [Parselets](/articles/parseletsIntro.html) StrataCode can read and modify file formats more easily than with other tools. With an API for the code, framework developers can keep information in sync between components, and provide full-lifecycle tools. For example, to track schema changes, or to determine when cluster configuration has changed and a production update should be deployed.

### Multi process systems

Layers can define new processes for the system, and constrain the process they will run. On startup, the layer stack organizes into separate stacks, one for each process. Code-generation and data-sync support seamless RPC - run code as a monolith or as separate services as needed.

<% ) %>
   </div>

   </div></div>
</body>

</html>


