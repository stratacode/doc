<html extends="ArticlePage">
<head title="Layered Build and Packaging"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>

## Layered builds

The 'scc' command provided by StrataCode provides many of the same capabilities as a standard build tool like maven or gradle, but project files are written using Java syntax and libraries along with the StrataCode extensions. While a layer can look exactly like an existing module, it's better to use them as 'overlays' - where each layer specifies only the files and configuration it wants to add or change from it's base layers. Each layer ends up having fewer files with higher 'customization intent'. Using layers, breaking out a common feature, or set of dependencies is an easy change and can be done in a way that preserves compatibility.

## Smarter code-processing

Using Parselets StrataCode can transpile formats easily, giving framework developers the ability to keep information in sync between different components.

## Multi process systems

Layers can add new processes to the system, and include constraints about where they run. This makes the layer stacks self-organizing, and able to model complete systems. Today, this runs declarative client/server applications but with more integrations and fine-tuning it will support flexible backend service development and deployment.  Code-generation helps automate the RPC communication and lets you run the same application code in different process configurations.

## Consolidated management UIs

StrataCode's management UI framework lets framework developers build tools to help keep formats in sync and manage them. If you look at the large number of tools used in today's systems development, they all include some form of configuration, plugins, customization management. StrataCode can help integrate these systems and become the missing glue for more complete 'feature oriented systems', where features span the application, platform, and operational domains. For example, build, run and deploy a complete system from a list of layers: ecommerce, blog, themes, auto-scaling frameworks, operational config, hosting provide frameworks, etc.

From that set of layers, scc has all the information it needs to generate the package dependencies, build the application code, generate operational config from templates, build or update required virtual machine images, and configure the deployment. The management UI is assembled to manage all of the features, including the ability to help roll out updates. 

The framework integrations to fully realize this vision are not complete and we need more testing of larger multi-process systems.

Currently the DB framework does manage the complete lifecycle of a postgres database schema and we do support robust client/server applications from a single command.
<% ) %>
   </div>

   </div></div>
</body>

</html>


