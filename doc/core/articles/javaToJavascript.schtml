<html extends="ArticlePage">
<head title="Web programming, Java to JS"/>

<body>
   <div id="content"><div id="mainSection">
       <div id="pageContent" exec="server">

<%= MarkDownPage.markDown(%>

## Flexible, efficient Java web applications

The StrataCode webFramework is built with components, properties, data binding and templates. The same code runs on both client and server with a Java to Javascript 
converter built with [Parselets](/articles/parseletsIntro.html). Web applications are built with the readable schtml file format for fast initial page loads, and efficient, incremental refresh.

### Java to Javascript converter

Java is converted to readable, debugging Javascript that looks a lot like the original.

Java selection sort:
<% ) %>
   <%= sc.lang.JavaLanguage.INSTANCE.styleFile("example/simple", "SortTest.scj", false, false, true) %>
converted to Javascript:
   <%= sc.lang.js.JSLanguage.INSTANCE.styleBuildFile("example/simple", "js", "js/types/example/simple/SortTest.js", false, false, true) %>

<%= MarkDownPage.markDown(%>

### Template language

Static-typed web pages and components from HTML tag objects:

A login form from the [site  builder](/examples/siteBuilder.html):
<% ) %>
   <%= sc.lang.HTMLLanguage.INSTANCE.styleFile("user/html/core", "user/LoginView.schtml", false, false, true) %>
<%= MarkDownPage.markDown(%>

A hierarchical tree widget from the [program editor](/examples/programEditor.html):
<% ) %>
   <%= sc.lang.HTMLLanguage.INSTANCE.styleFile("editor/html/core", "TreeView.schtml", false, false, true) %>
<%= MarkDownPage.markDown(%>
The repeated childTree extends this TreeView component recursively.


Tags are converted to tag objects, then to Java classes. One tag object can extend or modify another for flexible, customizable web components.
JSP-like operators allow Java code to be mixed in as needed. Attributes of the tag set properties of the tagObject and can use data binding expressions. 

### Flexible deployment

The same APIs and interfaces work in three different ways:

* Serverless apps where the application code runs entirely in the browser
* Client/server apps where application code runs in both 
* Server-only apps where the application code only runs on the server, sending snippets of HTML across the wire for fast, incremental refreshes. 

### Isomorphic Java

Layers allow shared parts of classes to be used on both browser and server, and even to be automatically [synchronized](/articles/syncWithLayers.html) for more declarative apps.

In client/server mode, the first request from the browser generates HTML on the server, the browser draws it quickly, then downloads Javascript to do further updates incrementally on the client.

Read more in the [documentation](../doc/webDoc/).

## Status

See the [status](../status.html) page.

<% ) %>

   </div>

   </div></div>

</body>

</html>

